#include "finalproject.h"
finalproject::finalproject(QWidget *parent)
    : QWidget(parent)
{
    drawForm(); // call drawForm
    //when connect button is clicked call the serConnect() slot
    connect(refresh,SIGNAL(clicked()),this,SLOT(enumerateSerPorts()));
    connect(conbtn,SIGNAL(clicked()),this,SLOT(serConnect()));
    connect(disconbtn,SIGNAL(clicked()),this,SLOT(serDisConnect()));
   // connect(txbtn,SIGNAL(clicked()),this,SLOT(serSendTxBuff()));
    //connect(clrrxbtn,SIGNAL(clicked()),this,SLOT(serClrRxBuff()));
    //connect(clrtxbtn,SIGNAL(clicked()),this,SLOT(serClrTxBuff()));
    //when data is available to be read on the serial port
    //the readyRead() signal is emitted by the QSerialport object 'serial'
    //this in turns activates the dispRxData() slot which reads all
    //availble data from the serial port and then displays it in the RX buffer
    connect(serial,SIGNAL(readyRead()),this,SLOT(dispRxData()));
}
finalproject::~finalproject()
{
}
void finalproject::enumerateSerPorts(void ){
    box->clear();
    serinfo = QSerialPortInfo::availablePorts();
    Q_FOREACH(QSerialPortInfo port,QSerialPortInfo::availablePorts()) {
        box->addItem(port.portName());
    }
}
void finalproject::drawForm(void){
    F1 = new QLabel("Finger 1:");
    F2 = new QLabel("Finger 2:");
    F3 = new QLabel("Finger 3:");
    F4 = new QLabel("Finger 4:");
    F5 = new QLabel("Finger 5:");
    refresh = new QPushButton("Refresh");
    serial = new QSerialPort(this);
    conbtn = new QPushButton("Connect"); //create connect button
    disconbtn = new QPushButton("Disconnect"); //create disconnect button
    bird = new QPushButton("Flip The Bird");
    up = new QPushButton("Thumbs Up");
    point = new QPushButton("Pointing");
    peaceSymb = new QPushButton("Peace");
    surf = new QPushButton("Surfer");
    rock = new QPushButton("Rock And Roll");
    free = new QPushButton("Free Movement");
    //txbtn = new QPushButton("Send"); //create send button
   // clrtxbtn = new QPushButton("Clear Tx Buffer"); //create clear TX buffer button
    //clrrxbtn = new QPushButton("Clear Rx Buffer"); //create clear RX buffer button
   // rxbuff = new QTextEdit(); //Create RX Buffer
    //txbuff = new QTextEdit(); //Create TX Buffer
    statuslbl = new QLabel(); // Create status label...displys port status
    statuslbl->setText("Port: is disconnected");
    //txlbl = new QLabel("&Tx Buffer"); //label for TX buffer ALT-T moves focus to this control
    //rxlbl = new QLabel("&Rx Buffer"); ////label for TX buffer ALT-R moves focus to this control
    //rxlbl->setBuddy(rxbuff); //set rxbuff as buddy of rxlbl
    //txlbl->setBuddy(txbuff); //set txbuff as buddy of txlbl
    connect(bird, SIGNAL(clicked(bool)),this,SLOT(flipTheBird()));
    connect(up, SIGNAL(clicked(bool)), this, SLOT(thumbsUp()));
    connect(point, SIGNAL(clicked(bool)), this, SLOT(pointing()));
    connect(peaceSymb, SIGNAL(clicked(bool)), this, SLOT(peace()));
    connect(surf, SIGNAL(clicked(bool)), this, SLOT(rockAndRoll()));
    connect(free, SIGNAL(clicked(bool)), this, SLOT(Free()));
    vboxbuff = new QVBoxLayout();
    vboxButtons = new QVBoxLayout();
    hboxAll = new QHBoxLayout();
    hboxbtns = new QHBoxLayout();
    //txhbox = new QHBoxLayout();
    //rxhbox = new QHBoxLayout();
    box = new QComboBox();
    baud = new QComboBox();
    addbaud();
    vboxbuff->addWidget(box);
    vboxbuff->addWidget(baud);
    //txhbox->addWidget(txlbl);txhbox->addWidget(txbtn); txhbox->addWidget(clrtxbtn);
    //rxhbox->addWidget(rxlbl); rxhbox->addWidget(clrrxbtn);
    hboxbtns->addWidget(conbtn); hboxbtns->addWidget(disconbtn); hboxbtns->addWidget(refresh);
    vboxbuff->addWidget(statuslbl);
    vboxbuff->addLayout(hboxbtns);
    //vboxbuff->addLayout(rxhbox);
    vboxbuff->addWidget(F1);
    vboxbuff->addWidget(F2);
    vboxbuff->addWidget(F3);
    vboxbuff->addWidget(F4);
    vboxbuff->addWidget(F5);
    vboxButtons->addWidget(free);
    vboxButtons->addWidget(bird);
    vboxButtons->addWidget(up);
    vboxButtons->addWidget(point);
    vboxButtons->addWidget(peaceSymb);
    vboxButtons->addWidget(surf);
    vboxButtons->addWidget(rock);
    //vboxbuff->addWidget(rxbuff);
    //vboxbuff->addLayout(txhbox);
    //vboxbuff->addWidget(txbuff);
    hboxAll->addLayout(vboxbuff);
    hboxAll->addLayout(vboxButtons);
    setLayout(hboxAll);
    setWindowTitle("Simple Serial Terminal"); // sets window title
    //sets tool tip
    setToolTip("This is a simple serial terminal application hardwired to 9600 8-N-1.\n It will connect to the first enumerated serial port");
    //sets application icon
    setWindowIcon(QIcon("serial.png"));
    //ensures that TextEdit objects interprets a tab keypress as focus change
    //& and not part of the textediting inside the control
    //rxbuff->setTabChangesFocus(true);
  //  txbuff->setTabChangesFocus(true);
    //sets tab order of the widgets in the application
    // setTabOrder(txbuff,clrtxbtn); // 1- TX buffer / 2- clear TX buffer button
    // setTabOrder(clrtxbtn,txbtn);// 3-Send button
    // setTabOrder(txbtn, rxbuff);// 4- RX buffer
     //setTabOrder(rxbuff,clrrxbtn);// 5-clear RX buffer button
   //  setTabOrder(clrrxbtn,disconbtn);//6-disconnect button
//     setTabOrder(disconbtn,conbtn);// 7-connect button

}
void finalproject::serConnect(void){
    //enumerateSerPorts();// save a list of available ports info in serinfo
    if(serinfo.count() == 0){ // if no ports are found...
        QMessageBox::warning(this,"Oops!","No Serial Port Found!!!");
    }
    else{//if at least one port is found...we will use the first port found
        portname = serinfo[box->currentIndex()].portName();
         qDebug() << "Trying to connect to" << portname <<endl;
        serial->setPort(serinfo[box->currentIndex()]);
            if(serial->isOpen())//if port is already open...
                QMessageBox::warning(this,"Oops!","Serial port is already open. Please disconnect first");
            else{ //if port is available and not open...open it
                if (serial->open(QIODevice::ReadWrite) == false){
                    QMessageBox::warning(this,"Oops!","Failed to open port");
                    serial->close(); //if opening port failed close it
                }
                else { //if port opened successfully....set its parameters
                    checkbaud();//BaudRate //,QSerialPort::AllDirections);
                    serial->setDataBits(QSerialPort::Data8);// 8-bit data
                    serial->setParity(QSerialPort::NoParity); // no parity
                    serial->setFlowControl(QSerialPort::NoFlowControl); //no flow control
                    serial->setStopBits(QSerialPort::OneStop);// 1 stop bit
                    statuslbl->setText("Port :" + serinfo[box->currentIndex()].portName() + " is open 9600 8-N-1."); //update status label
                }
            }
    }
}
void finalproject::serDisConnect(void){
    if(serial->isOpen()==false)
         QMessageBox::warning(this,"Oops!","Serial port is already closed!");
    else{
        serial->close(); // close port
        statuslbl->setText("Port :" + serinfo[box->currentIndex()].portName() + " is disconnected"); //update status label
    }
}
/*void finalproject::serSendTxBuff(void){
    if(serial->isOpen() == false) //
        QMessageBox::warning(this,"Oops!","Port not open");
    else if(txbuff->toPlainText().count() == 0)
        QMessageBox::warning(this,"Oops!","Transmit Buffer is Empty");
    else           // if port is open and data is available in the transmit buffer
        serial->write((txbuff->toPlainText()).toStdString().c_str()); //write TX buffer contents to serial port
}*/
/*void finalproject::serClrTxBuff(void){
    txbuff->clear(); // clear RX buffer
}*/
/*void finalproject::serClrRxBuff(void){
    rxbuff->clear();// clear TX buffer
}*/
//Everytime data is received by the serial port...the "readyRead()" signal
//is emitted by the QSerialPort object. This signal is then
//connected to the dispRXData slot method below
//which reads the data on the serial port and displays
//them in the RX buffer
void finalproject::dispRxData(void){
    QString Ihate;
    Ihate = serial->readAll();
    if((Ihate[0] == '#') && (Ihate[1] == '1'))
    {
        Ihate.remove(0,3);
        QString finger1 = "Finger 1:" + Ihate;
         F1->setText(finger1);
        //rxbuff->insertPlainText(finger1);
    }
    else if((Ihate[0] == '#') && (Ihate[1] == '2'))
    {
        Ihate.remove(0,3);
        QString finger2 = "Finger 2:" + Ihate;
        F2->setText(finger2);
        //rxbuff->insertPlainText(finger2);
    }
    else if((Ihate[0] == '#') && (Ihate[1] == '3'))
    {
        Ihate.remove(0,3);
        QString finger3 = "Finger 3:" + Ihate;
        F3->setText(finger3);
        //rxbuff->insertPlainText(finger2);
    }
    else if((Ihate[0] == '#') && (Ihate[1] == '4'))
    {
        Ihate.remove(0,3);
        QString finger4 = "Finger 4:" + Ihate;
        F4->setText(finger4);
       // rxbuff->insertPlainText(finger2);
    }
    else if((Ihate[0] == '#') && (Ihate[1] == '5'))
    {
        Ihate.remove(0,3);
        QString finger5 = "Finger 5:" + Ihate;
        F5->setText(finger5);
        //rxbuff->insertPlainText(finger2);
    }
}

void finalproject::addbaud(void){
    baud->addItem("9600");
    baud->addItem("14400");
    baud->addItem("19200");
    baud->addItem("28800");
    baud->addItem("38400");
    baud->addItem("56000");
}

void finalproject::checkbaud(void){
    serial->setBaudRate(baud->currentText().toInt());
}

void finalproject::Free(void){

   QByteArray s;s.append(0x80);s.append(0x82);
    s.append(0x81);

    serial->write(s,s.length());
}

void finalproject::flipTheBird(void){
    QByteArray s;s.append(0x80);s.append(0x83);
    s.append(0x81);

    serial->write(s,s.length());
}

void finalproject::thumbsUp(void){
    QByteArray s;s.append(0x80);s.append(0x84);
    s.append(0x81);

    serial->write(s,s.length());
}

void finalproject::pointing(void){
    QByteArray s;s.append(0x80);s.append(0x85);
    s.append(0x81);

    serial->write(s,s.length());
}

void finalproject::peace(void){
    QByteArray s;s.append(0x80);s.append(0x86);
    s.append(0x81);

    serial->write(s,s.length());
}

void finalproject::surfer(void){
    QByteArray s;s.append(0x80);s.append(0x87);
    s.append(0x81);

    serial->write(s,s.length());
}

void finalproject::rockAndRoll(void){
    QByteArray s;s.append(0x80);s.append(0x88);
    s.append(0x81);

    serial->write(s,s.length());
}

